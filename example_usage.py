#!/usr/bin/env python3
"""
Exemplos de uso do Agente LLM para Dados de Pneus
Este arquivo demonstra como usar o sistema para diferentes tipos de an√°lises.
"""

from llm_agent import TireDataLLMAgent
from statistical_analyzer import TireStatisticalAnalyzer
import json

def exemplo_consultas_basicas():
    """Exemplos de consultas b√°sicas em linguagem natural."""
    print("=" * 60)
    print("EXEMPLOS DE CONSULTAS B√ÅSICAS")
    print("=" * 60)
    
    agent = TireDataLLMAgent()
    
    consultas_basicas = [
        "Quantos dispositivos √∫nicos temos no sistema?",
        "Qual √© a press√£o m√©dia registrada?",
        "Qual √© a temperatura m√©dia dos pneus?",
        "Quantas medi√ß√µes temos no total?"
    ]
    
    for consulta in consultas_basicas:
        print(f"\nü§ñ Pergunta: {consulta}")
        try:
            resultado = agent.query(consulta)
            print(f"üìä Registros encontrados: {resultado['data_count']}")
            print(f"üîç SQL gerado: {resultado['sql_query']}")
            print(f"üí° An√°lise: {resultado['analysis'][:200]}...")
        except Exception as e:
            print(f"‚ùå Erro: {e}")
        print("-" * 40)

def exemplo_analises_por_posicao():
    """Exemplos de an√°lises espec√≠ficas por posi√ß√£o de pneu."""
    print("\n" + "=" * 60)
    print("AN√ÅLISES POR POSI√á√ÉO DE PNEU")
    print("=" * 60)

    agent = TireDataLLMAgent()

    consultas_posicao = [
        "Mostre a press√£o m√©dia por posi√ß√£o de pneu",
        "Qual posi√ß√£o de pneu tem a maior varia√ß√£o de temperatura?",
        "Compare a velocidade m√©dia por posi√ß√£o de pneu",
        "Lista de posi√ß√µes de pneu com press√£o abaixo de 100 PSI"
    ]

    for consulta in consultas_posicao:
        print(f"\nüìç Pergunta: {consulta}")
        try:
            resultado = agent.query(consulta)
            print(f"üìä Registros: {resultado['data_count']}")
            print(f"üí° Insight: {resultado['analysis'][:150]}...")
        except Exception as e:
            print(f"‚ùå Erro: {e}")
        print("-" * 40)

def exemplo_analises_temporais():
    """Exemplos de an√°lises temporais."""
    print("\n" + "=" * 60)
    print("AN√ÅLISES TEMPORAIS")
    print("=" * 60)
    
    agent = TireDataLLMAgent()
    
    consultas_temporais = [
        "Quantas medi√ß√µes foram registradas nos √∫ltimos 7 dias?",
        "Qual foi a press√£o m√©dia dos pneus na √∫ltima semana?",
        "Mostre a evolu√ß√£o di√°ria das medi√ß√µes nos √∫ltimos 30 dias",
        "Qual dia teve a maior m√©dia de temperatura?",
        "Compare as medi√ß√µes de hoje com ontem"
    ]
    
    for consulta in consultas_temporais:
        print(f"\nüìÖ Pergunta: {consulta}")
        try:
            resultado = agent.query(consulta)
            print(f"üìä Registros: {resultado['data_count']}")
            print(f"üí° Tend√™ncia: {resultado['analysis'][:150]}...")
        except Exception as e:
            print(f"‚ùå Erro: {e}")
        print("-" * 40)

# Observa√ß√£o:
# A tabela ``tire_data_json_llm`` agora possui a coluna ``position``, que indica
# em qual pneu o sensor foi instalado (por exemplo, 1 para dianteiro esquerdo).
# Portanto, √© poss√≠vel realizar an√°lises espec√≠ficas por posi√ß√£o de pneu.
# Use a fun√ß√£o ``exemplo_analises_por_posicao`` acima para ver exemplos de
# consultas e an√°lises agrupadas por posi√ß√£o.

def exemplo_analises_estatisticas_avancadas():
    """Exemplos usando o m√≥dulo de an√°lises estat√≠sticas."""
    print("\n" + "=" * 60)
    print("AN√ÅLISES ESTAT√çSTICAS AVAN√áADAS")
    print("=" * 60)
    
    analyzer = TireStatisticalAnalyzer()
    
    print("üìà 1. ESTAT√çSTICAS GERAIS")
    try:
        stats = analyzer.get_vehicle_statistics()
        print(f"   Total de dispositivos: {stats.get('total_devices', stats.get('total_vehicles', 'N/A'))}")
        print(f"   Total de medi√ß√µes: {stats.get('total_measurements', 0):,}")
        print(f"   Per√≠odo: {stats.get('first_measurement')} a {stats.get('last_measurement')}")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
    
    print("\nüìä 2. TOP 10 DISPOSITIVOS POR MEDI√á√ïES")
    try:
        pressure_stats = analyzer.get_pressure_statistics_by_vehicle(10)
        for _, row in pressure_stats.iterrows():
            device = row.get('device') or row.get('imei')
            print(f"   {device}: {row['measurements_count']:,} medi√ß√µes, "
                  f"press√£o m√©dia {row['avg_pressure']:.1f} PSI")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
    
    print("\nüè• 3. SCORE DE SA√öDE DOS DISPOSITIVOS")
    try:
        health_scores = analyzer.get_vehicle_health_score(10)
        for _, row in health_scores.iterrows():
            device = row.get('device') or row.get('imei')
            status = "üü¢" if row['health_score'] >= 90 else "üü°" if row['health_score'] >= 70 else "üî¥"
            print(f"   {status} {device}: Score {row['health_score']:.1f} "
                  f"({row.get('pressure_outliers', 0)} press√µes fora do ideal)")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")

def exemplo_consultas_complexas():
    """Exemplos de consultas mais complexas."""
    print("\n" + "=" * 60)
    print("CONSULTAS COMPLEXAS")
    print("=" * 60)
    
    agent = TireDataLLMAgent()
    
    consultas_complexas = [
        "Mostre dispositivos com press√£o m√©dia acima de 130 PSI e mais de 1000 medi√ß√µes",
        "Identifique dispositivos com varia√ß√£o alta de press√£o (alto desvio padr√£o)",
        "Compare a performance de dispositivos em diferentes regi√µes geogr√°ficas",
        "Qual √© a rela√ß√£o entre temperatura m√©dia e velocidade m√©dia por dispositivo?",
        "Qual dispositivo percorreu a maior dist√¢ncia no per√≠odo registrado?"
    ]
    
    for consulta in consultas_complexas:
        print(f"\nüß† Pergunta: {consulta}")
        try:
            resultado = agent.query(consulta)
            print(f"üìä Registros: {resultado['data_count']}")
            print(f"üîç SQL: {resultado['sql_query'][:100]}...")
            print(f"üí° Insight: {resultado['analysis'][:200]}...")
        except Exception as e:
            print(f"‚ùå Erro: {e}")
        print("-" * 40)

def exemplo_geracao_relatorio():
    """Exemplo de gera√ß√£o de relat√≥rio completo."""
    print("\n" + "=" * 60)
    print("GERA√á√ÉO DE RELAT√ìRIO COMPLETO")
    print("=" * 60)
    
    analyzer = TireStatisticalAnalyzer()
    
    try:
        print("üìã Gerando relat√≥rio abrangente...")
        relatorio = analyzer.generate_comprehensive_report()

        print("\nüìä RESUMO EXECUTIVO:")
        stats = relatorio['general_stats']
        print(f"‚Ä¢ Total de dispositivos monitorados: {stats.get('total_devices', stats.get('total_vehicles', 'N/A'))}")
        print(f"‚Ä¢ Volume de dados: {stats.get('total_measurements', 0):,} medi√ß√µes")
        print(f"‚Ä¢ Per√≠odo de an√°lise: {stats.get('first_measurement')} a {stats.get('last_measurement')}")

        print("\nüìà M√âTRICAS POR DISPOSITIVO:")
        pressure_stats = relatorio['pressure_stats']
        print(f"‚Ä¢ Dispositivos analisados: {len(pressure_stats)}")
        
        print("\nüèÜ TOP DISPOSITIVOS (por press√£o m√©dia):")
        top_pressure = pressure_stats.sort_values(by='avg_pressure', ascending=False).head(3)
        for _, row in top_pressure.iterrows():
            device = row.get('device') or row.get('imei')
            print(f"‚Ä¢ {device}: press√£o m√©dia {row['avg_pressure']:.1f} PSI")
        
        print("\n‚ö†Ô∏è DISPOSITIVOS COM MAIOR VARIA√á√ÉO DE TEMPERATURA:")
        temp_stats = relatorio['temperature_stats']
        top_temp = temp_stats.sort_values(by='temperature_stddev', ascending=False).head(3)
        for _, row in top_temp.iterrows():
            device = row.get('device') or row.get('imei')
            print(f"‚Ä¢ {device}: desvio padr√£o {row['temperature_stddev']:.2f}")
        
        print("\n‚úÖ Relat√≥rio gerado com sucesso!")
    except Exception as e:
        print(f"‚ùå Erro na gera√ß√£o do relat√≥rio: {e}")

def exemplo_visualizacoes():
    """Exemplo de gera√ß√£o de visualiza√ß√µes."""
    print("\n" + "=" * 60)
    print("GERA√á√ÉO DE VISUALIZA√á√ïES")
    print("=" * 60)
    
    analyzer = TireStatisticalAnalyzer()
    
    visualizacoes = [
        ("pressure_by_device", "Press√£o por Dispositivo"),
        ("tire_position_analysis", "An√°lise por Posi√ß√£o de Pneu"),
        ("health_score", "Score de Sa√∫de")
    ]
    
    for viz_type, titulo in visualizacoes:
        try:
            print(f"üìà Gerando gr√°fico: {titulo}")
            plt = analyzer.create_visualization(viz_type, f"{viz_type}.png")
            print(f"‚úÖ Gr√°fico salvo: {viz_type}.png")
        except Exception as e:
            print(f"‚ùå Erro ao gerar {titulo}: {e}")

def exemplo_monitoramento_tempo_real():
    """Exemplo de monitoramento em tempo real."""
    print("\n" + "=" * 60)
    print("SIMULA√á√ÉO DE MONITORAMENTO EM TEMPO REAL")
    print("=" * 60)
    
    agent = TireDataLLMAgent()
    
    # Consultas para monitoramento cont√≠nuo
    consultas_monitoramento = [
        "Quantas medi√ß√µes foram registradas na √∫ltima hora?",
        "Quais dispositivos t√™m temperatura acima de 60¬∞C agora?",
        "H√° algum dispositivo com press√£o cr√≠tica (abaixo de 80 PSI)?",
        "Quantos dispositivos est√£o ativos nas √∫ltimas 2 horas?"
    ]
    
    print("üîÑ Executando verifica√ß√µes de monitoramento...")
    
    for i, consulta in enumerate(consultas_monitoramento, 1):
        try:
            print(f"\n{i}. {consulta}")
            resultado = agent.query(consulta)
            
            # Exibir contagem de registros e insight resumido
            print(f"   Dados: {resultado['data_count']} registros")
            print(f"   Insight: {resultado['analysis'][:100]}...")
            
        except Exception as e:
            print(f"‚ùå Erro na verifica√ß√£o {i}: {e}")

def main():
    """Executa todos os exemplos."""
    print("üöÄ DEMONSTRA√á√ÉO DO AGENTE LLM PARA DADOS DE PNEUS")
    print("=" * 80)
    
    exemplos = [
        exemplo_consultas_basicas,
        exemplo_analises_por_posicao,
        exemplo_analises_temporais,
        exemplo_analises_estatisticas_avancadas,
        exemplo_consultas_complexas,
        exemplo_geracao_relatorio,
        exemplo_visualizacoes,
        exemplo_monitoramento_tempo_real
    ]
    
    for exemplo in exemplos:
        try:
            exemplo()
        except KeyboardInterrupt:
            print("\n\n‚èπÔ∏è Execu√ß√£o interrompida pelo usu√°rio.")
            break
        except Exception as e:
            print(f"\n‚ùå Erro no exemplo {exemplo.__name__}: {e}")
            continue
    
    print("\n" + "=" * 80)
    print("‚úÖ DEMONSTRA√á√ÉO CONCLU√çDA")
    print("üí° Para usar o sistema, importe as classes e fa√ßa suas pr√≥prias consultas!")
    print("üìö Consulte o README.md e MANUAL_TECNICO.md para mais informa√ß√µes.")

if __name__ == "__main__":
    main()

